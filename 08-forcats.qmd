---
title: "08-forcats"
author: "Milo Coolman"
format: 
  html:
    embed-resources: true
---

# 8.1
```{r}
library(tidyverse)
library(here)
pokemon_df <- read_csv(here("data/pokemon_allgen.csv")) |>
  mutate(Generation_cat = factor(Generation))
pokemon_df

pokemon_df |> group_by(`Type 1`) |>
  summarise(counttype = n())
```

```{r}
pokemon_legend <- pokemon_df |> filter(Legendary == TRUE) |>
  group_by(Generation_cat) |>
  summarise(nlegend = n())
ggplot(data = pokemon_legend, aes(x = Generation_cat, y = nlegend)) +
  geom_col() +
  theme_minimal()
```

```{r}
pokemon_legend <- pokemon_legend |>
  mutate(Generation_cat2 = fct_recode(Generation_cat,
                                      Kanto = "1", Johto = "2",
                                      Hoenn = "3", Sinnoh = "4",
                                      Unova = "5", Kalos = "6")) |>
  select(Generation_cat2, everything())
head(pokemon_legend)

ggplot(data = pokemon_legend,
       aes(x = Generation_cat2, y = nlegend)) +
  geom_col() +
  theme_minimal()
```

```{r}
pokemon_long <- pokemon_df |> pivot_longer(c(`Type 1`, `Type 2`),
                            names_to = "Number",
                            values_to = "Type")
pokemon_long |>
  mutate(new_type = fct_collapse(Type, Coolest = c("Ice", "Dark"),
                                 Least_Cool = c("Fire", "Fighting", "Poison"))) |>
  select(new_type, Type, everything())
```

### Exercise 1
We could also use group_by() with mutate() but it is easier to use fct_collapse() because you can simply name the values you want and it does it while group_by() requires a bit more thinking.

### Exercise 2
```{r}
fruit_df <- tibble::tibble(fruit = c("A", "B", "B", "A"))
fruit_df |> mutate(fruit2 = fct_collapse(fruit, Apple = "A",
                                         Banana = "B"))
```

# 8.2
```{r}
pokemon_nodup <- pokemon_df |> group_by(`#`) |> slice(1) |>
  ungroup()
pokemon_long <- pokemon_nodup |>
  pivot_longer(c(`Type 1`, `Type 2`),
               names_to = "Number",
               values_to = "Type")
pokemon_sum <- pokemon_long |>
  group_by(Type) |>
  summarise(count_type = n()) |>
  filter(!is.na(Type))
ggplot(data = pokemon_sum, aes(x = Type,
                               y = count_type)) +
  geom_col() +
  coord_flip() + ## flips the x and y axes
  theme_minimal()
```

```{r}
pokemon_sum <- pokemon_sum |> 
  mutate(Type_ordered = fct_reorder(.f = Type, .x = count_type))
ggplot(data = pokemon_sum, aes(x = Type_ordered,
                               y = count_type)) +
  geom_col() +
  coord_flip() +
  theme_minimal()
```

```{r}
ggplot(data = pokemon_sum, aes(x = Type_ordered,
                               y = count_type)) +
  geom_segment(aes(x = Type_ordered, xend = Type_ordered,
                   y = 0, yend = count_type)) +
  geom_point() +
  coord_flip() +
  theme_minimal()
```

```{r}
pokemon_long <- pokemon_long |>
  filter(!is.na(Type)) |>
  mutate(Type_Deford = fct_reorder(.f = Type, .x = Defense,
                                   .fun = median))
ggplot(data = pokemon_long, aes(x = Type_Deford,
                               y = Defense)) +
  geom_boxplot() + 
  coord_flip() +
  theme_minimal()

pokemon_med <- pokemon_long |> group_by(Type_Deford) |>
  summarise(med_def = median(Defense)) |>
  mutate(Type_Deford = fct_reorder(.f = Type_Deford, .x = med_def,
                                   .fun = median))

ggplot(data = pokemon_med, aes(x = med_def, y = Type_Deford)) +
  geom_point() +
  theme_minimal()

ggplot(data = pokemon_med, aes(x = Type_Deford, y = med_def)) +
  geom_segment(aes(xend = Type_Deford, y = 0, yend = med_def)) +
  geom_point() +
  coord_flip() +
  theme_minimal()
```

```{r}
mortality_df <- read_csv(here("data/gun_violence_us.csv")) |>
  mutate(region = factor(region))
```

```{r}
ggplot(data = mortality_df,
       aes(x = ownership_rate, y = mortality_rate, colour = region)) +
  geom_point() +
  geom_smooth(method = "lm") +
  theme_minimal()
```

```{r}
mortality_df <- mortality_df |>
  mutate(region_3 = fct_relevel(region, c("South", "West", "MW", "NE")))
ggplot(data = mortality_df,
       aes(x = ownership_rate, y = mortality_rate, colour = region_3)) +
  geom_point() +
  geom_smooth(method = "lm") +
  theme_minimal()
```

```{r}
mod <- lm(mortality_rate ~ ownership_rate + region, data = mortality_df)
mod3 <- lm(mortality_rate ~ ownership_rate + region_3, data = mortality_df)
summary(mod)
summary(mod3)
```

### Exercise 3
```{r}
ggplot(data = pokemon_long |> mutate(Type_Deford2 = fct_reorder(.f = Type, .x = Defense,
                                   .fun = max)), aes(x = Type_Deford2,
                               y = Defense)) +
  geom_boxplot() + 
  coord_flip() +
  theme_minimal()
```

# Class Exercises

### Class Exercise 1
In the point and lollipop plot you cannot see the spread of the data. Defense is quantitative (and we want to see the spread of the distribution, if there are any outliers, and the shape of the distribution) For those reasons a boxplot would be a much better option. 

The lollipop would be better for displaying the number of pokemon in each type (Since type is a categorical variable)

### Class Exercise 2
This would get rid of duplicates because each pokemon has a # that is unique to it, so if we group_by(#) and slice(1) it will remove the 2nd and on entry for any pokemon with the same number which would just be a duplicate.
```{r}
## alternatively
pokemon_df |> ungroup() |> distinct(`#`, .keep_all = TRUE)
```


### Class Exercise 3
The boxplots are no longer ordered by median defense because they are still grouped by pokemon number. This means the fct_reorder is trying ot reorder within each group. fct_reorder does not work well with a grouped data frame.
```{r}
pokemon_nodup <- pokemon_df |> group_by(`#`) |> slice(1) ## |>
  ## ungroup()
pokemon_long <- pokemon_nodup |>
  pivot_longer(c(`Type 1`, `Type 2`),
               names_to = "Number",
               values_to = "Type")

pokemon_long <- pokemon_long |>
  filter(!is.na(Type)) |>
  mutate(Type_Deford = fct_reorder(.f = Type, .x = Defense,
                                   .fun = median))
ggplot(data = pokemon_long, aes(x = Type_Deford,
                               y = Defense)) +
  geom_boxplot() + 
  coord_flip()
```

### Class Exercise 4
```{r}
responses_df <- read_csv("https://raw.githubusercontent.com/highamm/ds234_quarto/main/data_online/heatmap.csv")
responses_df

responses_df2 <- responses_df |> mutate(time = as.factor(time),
                                        challenge = as.factor(challenge)) |>
  group_by(time, challenge, .drop = FALSE) |> summarise(n_total = n()) |> 
  ungroup() |>
  mutate(time2 = fct_recode(time, 
                             Most_Time = "1",
                             Second = "2",
                             Third = "3",
                             Least_Time = "4")) |>
  mutate(challenge2 = fct_recode(challenge,
                                 Most_Challenge = "1",
                                 Second = "2",
                                 Third = "3",
                                 Least_Challenge = "4"),
         time2 = fct_relevel(time2, 
                                  c("Least_Time", "Third", "Second", "Most_Time")))
responses_df2

ggplot(data = responses_df2, aes(x = challenge2, y = time2, fill = n_total)) +
  geom_tile(colour = "black") +
  theme_minimal() + 
  scale_fill_viridis_c() +
  labs(x = "Challenge",
       y = "Time") +
  scale_x_discrete(position = "top")
```

# Your Turns
```{r}
library(tidyverse)
library(here)
standings_df <- read_csv(here("data/standings.csv"))
standings_df

```

### Your Turn 1
There are 32 teams, and each of them appears in the data set 20 times (except for the texans)
```{r}
table(standings_df$team_name)
```

### Your Turn 2
```{r}
standings_df
standings_df2 <- standings_df |> mutate(team_name = as.factor(team_name)) |>
  mutate(team_name = fct_recode(team_name,
                                Commanders = "Redskins"))
table(standings_df2$team_name)
```

### Your Turn 3
```{r}
standings_df3 <- standings_df2 |> unite("franchise", c(team, team_name), sep = " ")
table(standings_df3$franchise)
```

### Your Turn 4
```{r}
standings_df4 <- standings_df3 |> mutate(franchise = as.factor(franchise)) |>
  mutate(franchise = fct_collapse(franchise,
                                  "St. Louis LA Rams" = c("St. Louis Rams", "Los Angeles Rams"),
                                  "San Diego LA Chargers" = c("San Diego Chargers", "Los Angeles Chargers")))
table(standings_df4$franchise)
```

### Your Turn 5
```{r}
standings_df5 <- standings_df4 |> mutate(playoffs = case_when(playoffs == "Playoffs" ~ 1,
                                             playoffs == "No Playoffs" ~ 0)) |>
  group_by(franchise) |>
  summarise(n_playoffs = sum(playoffs)) |>
  arrange(desc(n_playoffs)) |>
  slice(1:10) |> 
  mutate(franchise = fct_reorder(franchise, n_playoffs))
standings_df5

ggplot(data = standings_df5, aes(x = franchise, y = n_playoffs)) + 
  geom_point() +
  geom_segment(aes(xend = franchise, yend = 0)) +
  coord_flip() +
  theme_minimal()
```

### Your Turn 6
```{r}
ggplot(data = standings_df5, aes(x = franchise, y = n_playoffs)) + 
  geom_point(size = 10, colour = "purple") +
  geom_segment(aes(xend = franchise, yend = 0), size = 1, colour = "red", linetype = "dotdash") +
  coord_flip() +
  theme_minimal()
```