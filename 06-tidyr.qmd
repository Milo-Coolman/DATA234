---
title: "06-tidyr"
author: "Milo Coolman"
format: 
  html:
    embed-resources: true
---

# 6.2
```{r}
library(tidyverse)
library(here)
polls <- read_csv(here("data/rcp-polls.csv"), na = "--")
polls

polls |> summarise(meansample = mean(Sample))

polls |>
  separate(col = Sample, into = c("Sample_size", "Sample_type"), 
           sep = " ")

polls_sep <- polls |>
  separate(col = Date, into = c("Start", "End"),
           sep = " - ")
polls_sep

polls_sillytest <- polls_sep |>
  separate(col = Start, into = c("Start_month", "Start_day"), 
           sep = "/")
polls_sillytest

polls_sillytest |>
  unite("New_start_date", c(Start_month, Start_day),
        sep = "/")

c(1, 4, 2)
c("A", "A", "D")

polls_new <- polls_sep |>
  rename(Clinton_D = `Clinton (D)`, Trump_R = `Trump (R)`,
         Johnson_L = `Johnson (L)`, Stein_G = `Stein (G)`)
polls_new

toy_df <- tibble::tibble(show = c("Bojack Horseman: Netflix",
                                  "VEEP: HBO",
                                  "American Vandal: Netflix",
                                  "Community: Peacock"),
                         seasons = c("1-6", "1-7", "1-2", "1-6"),
                         main_first = c("Bojack", "Selina", "Peter", "Jeff"),
                         main_last = c("Horseman", "Meyer", "Molganado", "Winger"))
toy_df
```

### Exercises 1-3
```{r}
toy_df |> separate(col = show, into = c("Name", "Network"), sep = ": ")

toy_df |> separate(col = seasons, into = c("Start", "End"), sep = "-")

toy_df |> unite("Main_Character_Name", c(main_first, main_last), sep = " ")
```

# 6.3
```{r}
polls_clean <- polls |>
  separate(col = Sample, into = c("Sample_size", "Sample_type"), 
           sep = " ")  |>
  separate(col = Date, into = c("Start", "End"),
           sep = " - ") |> 
  rename(Clinton_D = `Clinton (D)`, Trump_R = `Trump (R)`,
         Johnson_L = `Johnson (L)`, Stein_G = `Stein (G)`)
polls_clean

polls_long <- polls_clean |>
  pivot_longer(cols = c(Clinton_D, Trump_R, Johnson_L, Stein_G),
               names_to = "candidate", values_to = "poll_percent")
ggplot(data = polls_long,
       aes(x = as.Date(Start, "%m/%d"), y = poll_percent,
           colour = candidate)) +
  geom_point() + labs(x = "Poll Start Date")


stat113_df <- read_csv(here::here("data/stat113.csv"))
stat113_sum <- stat113_df |> filter(!is.na(Sex)) |> group_by(Year, Sex) |>
  summarise(n_students = n())
stat113_sum

stat113_sum |> pivot_wider(names_from = Year, values_from = n_students)
```

### Exercise 4
```{r}
stat113_df |> group_by(Sex, Sport) |> 
  summarise(avg_gpa = mean(GPA, na.rm = TRUE))
```

### Exercise 5
```{r}
disease_df <- tibble::tibble(location = c("A", "B", "C", "D", "E"),
                             year1 = c(5, 1, 10, 400, 31),
                             year2 = c(10, 80, 99, 100, 1),
                             year3 = c(0, 0, 20, 0, 40))
disease_df
disease_df |> pivot_longer(cols = c(year1, year2, year3), 
                           names_to = "year", values_to = "death_count")
```
Pivot so single column gives year and single column gives death count

# Class Exercises

### Class Exercise 2
```{r}
library(tidyverse)
library(here)
prices_df <- read_csv(here("data/UBSprices2.csv"))
prices_df

prices_long <- prices_df |> pivot_longer(
  c(bigmac2009, bread2009, rice2009, bigmac2003, bread2003, rice2003), 
  names_to = "temp", values_to = "price") |>
  separate(temp, c("commodity", "year"), sep = -4)
```

### Class Exercise 3
```{r}
prices_wide <- prices_long |> pivot_wider(names_from = "commodity", values_from = "price")
```

### Class Exercise 4
```{r}
ggplot(data = prices_long |> filter(commodity == "rice"), 
       aes(x = year, y = price, group = city)) +
  geom_line()
ggplot(data = prices_wide, aes(x = year, y = rice, group = city)) +
  geom_line()
## slightly easier to use wider format because we do not need to filter()
prices_long

ggplot(data = prices_long |> filter(city == "Amsterdam"), aes(x = year,
                                                              y = price)) +
  geom_line(aes(colour = commodity, group = commodity))
         
```

### Class Exercise 5
```{r}
mortality_df <- read_csv(here("data/under5mortality.csv"))
head(mortality_df)

mortality_long <- mortality_df |> pivot_longer(cols = c(2:217), 
                                               names_to = "Year", 
                                               values_to = ("Mortality"), 
                                               names_transform = list(Year = as.numeric)) |>
  rename(Country = 'Under five mortality')
mortality_long
```

### Class Exercise 6
```{r}
ggplot(data = mortality_long, aes(x = Year, 
                                  y = Mortality)) +
  geom_line(aes( group = Country), alpha = 0.1)
```

### Class Exercise 7
The graph looks weird because many countries have a flat mortality rate from 1800-1900. Perhaps the data just has an "average" mortality rate for each of these countries in the 19th century.

# Your Turn 1
```{r}
library(tidyverse)
library(here)
baseball_df <- read_csv(here("data/mlb2016.csv"))
head(baseball_df)
```
The Years variable is 3 variables. One for how many years the contract was for, one for the starting year of the contract, and another for the last year. The variables with money in it have $ and , which is not tidy.

# Your Turn 2
```{r}
baseball_long <- baseball_df |> separate(col = Years, 
                          into = c("years", "duration"),
                          sep = " ") |>
  separate(col = duration,
           into = c("Start", "End"),
           sep = "-")
baseball_long
```

# Your Turn 3
We get a warning because some players had a 1 year contract so their original duration was just a single year so there was no '-' to separate by.

# Your Turn 4
```{r}
baseball_long <- baseball_long |>
  mutate(Salary = parse_number(Salary),
         Total.Value = parse_number(Total.Value),
         Avg.Annual = parse_number(Avg.Annual),
         Start = parse_number(Start),
         End = parse_number(End))
baseball_long
```

# Your Turn 5
Average Salary for each position:
```{r}
ggplot(data = baseball_long, aes(x = POS, y = Salary)) +
  geom_boxplot()

library(scales)
ggplot(data = baseball_long, aes(x = POS, y = Salary)) +
  geom_violin() +
  scale_y_continuous(labels = label_comma())

ggplot(data = baseball_long, aes(x = POS, y = Salary)) +
  geom_jitter(width = 0.05) +
  scale_y_continuous(labels = label_comma())
```
This plot would not have been possible to make before tidying the data because the Salary variable was not a numerical variable because it had symbols in it.

# Your Turn 6
```{r}
nfl_df <- read_csv(here::here("data/nfl_salary.csv"))
head(nfl_df)
```
Multiple variables for different positions. Should be 1 position variable and one salary variable.

# Your Turn 7
```{r}
nfl_tidy <- nfl_df |> pivot_longer(cols = -1, 
                       names_to = "position", 
                       values_to = "salary")
nfl_tidy
```

# Your Turn 8
```{r}
nfl_tidy |> group_by(year, position) |>
  mutate(salary_rank = rank(desc(salary))) |>
  arrange(desc(salary))

nfl_salary_rank <- nfl_tidy |> group_by(year, position) |>
  mutate(salary_rank = rank(desc(salary), ties.method = "first")) |>
  arrange(desc(salary)) |> print(n = 12)
```
Default is giving both rows that tied, a 0.5 in their number. With ties.method = "first" however, it gives the first row '6' and the second row '7'

# Your Turn 9
```{r}
nfl_max <- nfl_salary_rank |> arrange(position, year, salary_rank) |>
  filter(salary_rank == 1)

ggplot(data = nfl_max, aes(x = year, y = salary)) +
  geom_line(aes(colour = position, group = position)) +
  scale_y_continuous(labels = label_comma())

ggplot(data = nfl_max, aes(x = year, y = salary)) +
  geom_line() +
  facet_wrap(~ position) +
  scale_y_continuous(labels = label_comma())
```

# Your Turn 10
```{r}
nfl_top20 <- nfl_salary_rank |> arrange(position, year, salary_rank) |>
  filter(salary_rank <= 20) |> summarise(avg_salary = mean(salary))
nfl_top20

ggplot(data = nfl_top20, aes(x = year, y = avg_salary)) +
  geom_line(aes(colour = position, group = position)) +
  scale_y_continuous(labels = label_comma())

ggplot(data = nfl_top20, aes(x = year, y = avg_salary)) +
  geom_line() +
  facet_wrap(~ position) +
  scale_y_continuous(labels = label_comma())
```
The running back position has plateaued in recent years. This is due to teams adopting a mentality that running back is one of the most replaceable positions, and as such it makes little sense to pay a running back a lot of money.

# Your Turn 11
```{r}
nfl_top20_inflation <- nfl_top20 |> filter(year == 2011 | year == 2018) |>
  mutate(adj_salary = if_else(year == 2011,
                              true = (avg_salary * 1.12),
                              false = avg_salary))
nfl_top20_inflation

ggplot(data = nfl_top20_inflation, aes(x = year, y = adj_salary)) +
  geom_line() +
  facet_wrap(~ position) +
  scale_y_continuous(labels = label_comma())
```

# Your Turn 12
```{r}
nfl_2018 <- nfl_salary_rank |> filter(year == 2018)
nfl_2018
ggplot(data = nfl_2018, aes(x = salary_rank, y = salary)) +
  geom_line() +
  facet_wrap(~ position) +
  scale_y_continuous(labels = label_comma())
```
The depreciation is so large for quarterbacks because each team only has 1 quarterback that really plays, and with the starters there are only 5-10 that are really good so those guys make a lot of money, whereas the rest of the starters and backups are not going to be making very much money at all.